import abc
from typing import Iterable, Tuple, Type

from pymcutil.resource.abc.resource import Resource
from pymcutil.resource.resource_database.abc.resource_database import ResourceDatabase
from pymcutil.resource.resource_generator.abc.resource_generator import ResourceGenerator
from pymcutil.resource.resource_location.abc.resource_location import ResourceLocation, ResourceName
from pymcutil.resource.resource_reference.abc.resource_reference import ResourceReference

ResourcePair = Tuple[Resource, ResourceLocation]


class ResourceManager(abc.ABC):
    @abc.abstractmethod
    def register(self, kind: Type[ResourceReference], generator: ResourceGenerator, database: ResourceDatabase = None):
        """ Register the given `kind` (type) of `ResourceReference` to be generated by `generator` and stored in
        `database`. """

    @abc.abstractmethod
    def get(self, reference: ResourceReference) -> ResourcePair:
        """ Return, as a `ResourcePair`, the `Resource` and `ResourceLocation` resulting from the given `reference`. """

    @abc.abstractmethod
    def refer(self, reference: ResourceReference) -> ResourceName:
        """ Return the `ResourceName` resulting from the given `reference` while ensuring that the corresponding
        `Resource` has been generated. """

    @abc.abstractmethod
    def generate(self, *references: ResourceReference) -> Iterable[ResourcePair]:
        """ Yield generated `Resource`s for each of the given `references`. """
