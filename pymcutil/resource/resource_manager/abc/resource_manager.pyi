import abc
from typing import Type, Union

from pymcutil.resource.located_resource.located_resource import LocatedResource
from pymcutil.resource.resource_database.abc.resource_database import ResourceDatabase
from pymcutil.resource.resource_generator.abc.resource_generator import ResourceGenerator
from pymcutil.resource.resource_location.abc.resource_location import ResourceLocation, ResourceName, ResourcePath
from pymcutil.resource.resource_reference.abc.resource_reference import ResourceReference


class ResourceManager(abc.ABC):
    @abc.abstractmethod
    def register(
            self, kind: Type[ResourceReference], generator: ResourceGenerator, database: ResourceDatabase = None):
        """ Register the given `kind` (type) of `ResourceReference` to be generated by `generator` and persisted by
        `database`. """

    @abc.abstractmethod
    def get(self, reference: ResourceReference) -> Union[LocatedResource, None]:
        """ Return a `LocatedResource` resulting from the given `reference`, if one exists. """

    @abc.abstractmethod
    def generate(self, reference: ResourceReference) -> LocatedResource:
        """
        Return a `Resource` resulting from the given `reference`. The resource should be located, generated, and
        thereafter made available from `get()`.

        *Does not support circular dependencies.* Resources should *never* contain circular dependencies via this
        method. Instead use `locate()` or `name()` to obtain a shallow reference to the resource.
        """

    @abc.abstractmethod
    def locate(self, reference: ResourceReference) -> ResourceLocation:
        """
        Return a `ResourceLocation` resulting from the given `reference`, while ensuring that the respective `Resource`
        is queued for generation.

        Supports circular dependencies.
        """

    @abc.abstractmethod
    def name(self, reference: ResourceReference) -> ResourceName:
        """ Convenience method for returning the `name` of the `ResourceLocation` returned by `locate()`. """

    @abc.abstractmethod
    def path(self, reference: ResourceReference) -> ResourcePath:
        """ Convenience method for returning the `path` of the `ResourceLocation` returned by `locate()`. """
